class Solution {
public:
    int dp[101][101][101];
    int helper(int i, int j, int size, vector<vector<int>> &arr, int k){
        // base case of k<0 is very important other wise TLE may occur
        if(i>=size || j>=size || k<0){ 
            return 0;
        }
        if(i==size-1 && j==size-1 && k==arr[i][j]){
            return 1;
        }
        if(i==size-1 && j==size-1 && k!=arr[i][j]){
            return 0;
        }
        if(dp[i][j][k]!=-1)return dp[i][j][k];
        int path1=helper(i+1, j, size, arr, k-arr[i][j]);
        int path2=helper(i, j+1, size, arr, k-arr[i][j]);
        return dp[i][j][k]=path1+path2;
    }
    long long numberOfPath(int n, int k, vector<vector<int>> &arr){
        
        // Code Here
        //int row=arr.size();
        //int col=arr[0].size();
        memset(dp, -1, sizeof dp);
        return helper(0,0,n,arr,k);
    }
};